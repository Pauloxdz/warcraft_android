/*
 * Copyright (c) 2020, Blair Butterworth
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */

plugins {
    id "java"
    id 'edu.sc.seis.launch4j' version '2.4.6'
    id "edu.sc.seis.macAppBundle" version "2.3.0"
    id "com.github.johnrengelman.shadow" version "5.2.0"
}

targetCompatibility = 1.8
sourceCompatibility = 1.8

sourceSets{
    main.java.srcDirs = [ "src/" ]
    main.resources.srcDirs = ["src/resources"]

    test.java.srcDirs = [ "test/" ]
    test.resources.srcDirs = [ "test/resources" ]
}

ext{
    appName = "Warcraft2"
    mainClass = "com.evilbird.warcraft.desktop.DesktopLauncher"
    assetsDir = "$rootDir/assets"
    iconPathMac = "$assetsDir/data/icons/WarcraftIcon.icns"
    iconPathWindows = "$assetsDir/data/icons/WarcraftIcon.ico"
    jarPath = "$buildDir/libs/Warcraft2-1.0-all.jar"
    jarDependencies = ""
}

//Task: desktop:run
task run(dependsOn: classes, type: JavaExec) {
    main = project.mainClass
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
    workingDir = project.assetsDir
    setIgnoreExitValue(true)
}

shadowJar {
    baseName = project.appName
    from files((String)project.assetsDir)
    manifest {
        attributes 'Main-Class': project.mainClass
    }
    minimize()
}

//Task: createApp
macAppBundle {
    icon = project.iconPathMac
    appName = project.appName
    mainClassName = project.mainClass
   // bundleJRE = true
    jarTask = "shadowJar"
}

//Task-: createExe
launch4j {
    mainClassName = project.mainClass
    icon = project.iconPathWindows
    jar = project.jarPath
    outfile = "${appName}.exe"
    bundledJrePath = "lib"
    bundledJre64Bit	= true
    bundledJreAsFallback = false
}

task getJarDependencies() {
    doLast {
        new ByteArrayOutputStream().withStream {stream ->
            exec {
                standardOutput = stream
                executable = "jdeps"
                args = ['--regex', '"(java.*|jdk.*)"', '--print-module-deps', project.jarPath]
            }
            project.jarDependencies = stream.toString()
            project.jarDependencies = project.jarDependencies.replace("\n", "")
            project.jarDependencies = project.jarDependencies.replace("\r", "")
            logger.info('Jar dependencies: ' + project.jarDependencies)
        }
    }
}

task createJavaRuntime(dependsOn: getJarDependencies) {
    inputs.property("dependencies", project.jarDependencies)
    outputs.dir("$buildDir/runtime")

    doLast {
        if (! JavaVersion.current().isJava11Compatible()) {
            throw new GradleException("This build must be run with java 11")
        }
        File file = project.file("$buildDir/runtime")
        if (file.exists()) {
            file.deleteDir()
        }
        exec {
            workingDir = 'build'
            executable = "jlink"
            args = ['--no-header-files',
                    '--no-man-pages',
                    '--compress=2',
                    '--add-modules',
                    project.jarDependencies,
                    '--output',
                    'runtime']
        }
    }
}

task macInstaller(dependsOn: createApp, type: Zip) {
    from 'build/macApp/'
    archiveName 'Warcraft-MacOS.zip'
    destinationDir file('build/installer')
}

task windowsInstaller(dependsOn: [createExe, createJavaRuntime], type: Zip) {
    from 'build/launch4j/Warcraft2.exe'
    from ('build/runtime') {
        into('lib')
    }
    archiveName 'Warcraft-Windows.zip'
    destinationDir file('build/installer')
}

task installer(dependsOn: [macInstaller, windowsInstaller]) {
    description "Generate application installer"
}

task report(dependsOn: test, type: JacocoReport) {
    description = "Generates a test coverate report"
    executionData.from = project.file("build/jacoco/test.exec")
    sourceDirectories.from = project.file("src")
    classDirectories.from = project.fileTree(dir: "build/classes/java/main",
        excludes: ['**/Dagger*', '**/*_Factory*', '**/*_ProvideDeviceFactory*'])
}