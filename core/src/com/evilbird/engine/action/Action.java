/*
 * Copyright (c) 2020, Blair Butterworth
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */

package com.evilbird.engine.action;

import com.evilbird.engine.common.lang.Identifiable;
import com.evilbird.engine.common.lang.Identifier;
import com.evilbird.engine.device.UserInput;
import com.evilbird.engine.object.GameObject;
import com.google.gson.annotations.JsonAdapter;

/**
 * Instances of this class represent a self contained "bundle" of behaviour
 * that modify the game state is a meaningful manner.
 *
 * @author Blair Butterworth
 */
@JsonAdapter(ActionAdapter.class)
public interface Action extends Identifiable<Identifier>
{
    /**
     * Updates the Action based on time. Typically this is called each frame by
     * {@link GameObject#update(float)}.
     */
    boolean run(float time);

    /**
     * Resets the action for reuse. Object references should be set to
     * {@code null} and fields may be set to default values.
     */
    void restart();

    /**
     * Stops execution of the action.
     */
    void cancel();

    /**
     * Returns the {@link UserInput} event that generated the Action. Not all
     * Actions are generated by user interactions so this method should be
     * considered optional.
     *
     * @return a UserInput instance. May be {@code null}.
     */
    UserInput getCause();

    /**
     * Returns the {@link GameObject} that the Action will operate on.
     *
     * @return an {@code GameObject} instance. Will not return {@code null}.
     */
    GameObject getSubject();

    /**
     * Returns an optional target that the Action will manipulate.
     *
     * @return an {@code GameObject} instance. May return {@code null}.
     */
    GameObject getTarget();

    /**
     * Determines if the action failed.
     */
    boolean isFailed();

    /**
     * Sets the {@link UserInput} event that generated the Action.
     */
    void setCause(UserInput input);

    /**
     * Set the actions unique identifier.
     */
    void setIdentifier(Identifier identifier);

    /**
     * Sets the {@link GameObject} that the Action will operate on.
     *
     * @param gameObject an Item instance. Cannot be {@code null}.
     */
    void setSubject(GameObject gameObject);

    /**
     * Sets an optional target that the Action will manipulate.
     *
     * @param target an Item instance. May be {@code null}.
     */
    void setTarget(GameObject target);
}
