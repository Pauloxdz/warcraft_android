/*
 * Blair Butterworth (c) 2019
 *
 * This work is licensed under the MIT License. To view a copy of this
 * license, visit
 *
 *      https://opensource.org/licenses/MIT
 */

package com.evilbird.warcraft.action.construct;

import com.evilbird.engine.events.EventQueue;
import com.evilbird.engine.item.Item;
import com.evilbird.engine.item.spatial.ItemNode;
import com.evilbird.warcraft.action.common.create.CreateEvent;
import com.evilbird.warcraft.action.common.create.CreateObserver;
import com.evilbird.warcraft.action.common.remove.RemoveEvent;
import com.evilbird.warcraft.action.common.remove.RemoveObserver;
import com.evilbird.warcraft.action.common.resource.ResourceTransferEvent;
import com.evilbird.warcraft.action.common.resource.ResourceTransferObserver;
import com.evilbird.warcraft.action.move.MoveEvent;
import com.evilbird.warcraft.action.move.MoveObserver;
import com.evilbird.warcraft.action.select.SelectEvent;
import com.evilbird.warcraft.action.select.SelectObserver;
import com.evilbird.warcraft.item.common.resource.ResourceContainer;
import com.evilbird.warcraft.item.common.resource.ResourceType;
import com.evilbird.warcraft.item.unit.building.Building;

import javax.inject.Inject;

/**
 * Instances of this class observe events generated by construction actions and
 * report them to the {@link EventQueue}.
 *
 * @author Blair Butterworth
 */
public class ConstructReporter implements
    ConstructObserver, CreateObserver, MoveObserver, RemoveObserver, SelectObserver, ResourceTransferObserver
{
    private EventQueue events;

    @Inject
    public ConstructReporter(EventQueue events) {
        this.events = events;
    }

    @Override
    public void onConstructionStarted(Item builder, Building building) {
        events.add(new ConstructEvent(builder, building, ConstructStatus.Started));
    }

    @Override
    public void onConstructionCompleted(Item builder, Building building) {
        events.add(new ConstructEvent(builder, building, ConstructStatus.Complete));
    }

    @Override
    public void onConstructionCancelled(Item builder, Building building) {
        events.add(new ConstructEvent(builder, building, ConstructStatus.Cancelled));
    }

    @Override
    public void onCreate(Item item) {
        events.add(new CreateEvent(item));
    }

    @Override
    public void onMove(Item item, ItemNode location) {
        events.add(new MoveEvent(item, location));
    }

    @Override
    public void onRemove(Item removed) {
        events.add(new RemoveEvent(removed));
    }

    @Override
    public void onSelect(Item item, boolean selected) {
        events.add(new SelectEvent(item, selected));
    }

    @Override
    public void onTransfer(ResourceContainer recipient, ResourceType resource, float oldValue, float newValue) {
        events.add(new ResourceTransferEvent(recipient, resource, oldValue, newValue));
    }
}
