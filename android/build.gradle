/*
 * Copyright (c) 2020, Blair Butterworth
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */

ext {
    loadProperties("../local.properties")
    loadProperties("../secure.properties")
}

def loadProperties(String propertiesPath) {
    def propertiesFile = project.file(propertiesPath)
    if (propertiesFile.exists()) {
        Properties properties = new Properties()
        propertiesFile.withInputStream { inputStream ->
            properties.load(inputStream)
        }
        properties.each { property ->
            project.ext.set(property.key, property.value)
        }
    }
}

android {
    signingConfigs {
        if (project.hasProperty('signing.keystore.file')) {
            config {
                keyAlias project.ext.get('signing.key.alias')
                keyPassword project.ext.get('signing.key.password')
                storeFile file(project.ext.get('signing.keystore.file'))
                storePassword project.ext.get('signing.keystore.password')
            }
        }
    }
    buildTypes {
        if (project.ext.has('signing.keystore.file')) {
            release {
                signingConfig signingConfigs.config
            }
        }
    }
    buildToolsVersion '29.0.2'
    compileSdkVersion 24
    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
            jniLibs.srcDirs = ['libs']
        }
    }
    packagingOptions {
        exclude 'META-INF/robovm/ios/robovm.xml'
    }
    defaultConfig {
        applicationId "com.evilbird.warcraft"
        minSdkVersion 24
    }
    productFlavors {
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

idea {
    module {
        sourceDirs += file("src");
        scopes = [COMPILE: [plus: [project.configurations.compile]]]

        iml {
            withXml {
                def node = it.asNode()
                def builder = NodeBuilder.newInstance();
                builder.current = node;
                builder.component(name: "FacetManager") {
                    facet(type: "android", name: "Android") {
                        configuration {
                            option(name: "UPDATE_PROPERTY_FILES", value: "true")
                        }
                    }
                }
            }
        }
    }
}

dependencies {
}

// called every time gradle gets executed, takes the native dependencies of
// the natives configuration, and extracts them to the proper libs/ folders
// so they get packed with the APK.
task copyAndroidNatives() {
    file("libs/armeabi/").mkdirs();
    file("libs/armeabi-v7a/").mkdirs();
    file("libs/arm64-v8a/").mkdirs();
    file("libs/x86_64/").mkdirs();
    file("libs/x86/").mkdirs();

    configurations.natives.files.each { jar ->
        def outputDir = null
        if (jar.name.endsWith("natives-arm64-v8a.jar")) outputDir = file("libs/arm64-v8a")
        if (jar.name.endsWith("natives-armeabi-v7a.jar")) outputDir = file("libs/armeabi-v7a")
        if (jar.name.endsWith("natives-armeabi.jar")) outputDir = file("libs/armeabi")
        if (jar.name.endsWith("natives-x86_64.jar")) outputDir = file("libs/x86_64")
        if (jar.name.endsWith("natives-x86.jar")) outputDir = file("libs/x86")
        if (outputDir != null) {
            copy {
                from zipTree(jar)
                into outputDir
                include "*.so"
            }
        }
    }
}

task run(type: Exec) {
    def sdk = project.hasProperty('sdk.dir') ? project.ext.get('sdk.dir') : System.getProperty("ANDROID_HOME", "")
    def adb = sdk + "/platform-tools/adb"
    def launcher = 'com.evilbird.warcraft/com.evilbird.warcraft.AndroidLauncher'
    commandLine "$adb", 'shell', 'am', 'start', '-n', launcher
}

task installer(dependsOn: 'assembleRelease', type: Copy) {
    description "Generate application installer"
    from 'build/outputs/apk/release/android-release.apk'
    into 'build/installer/'
    rename 'android-release.apk', 'Warcraft-Android.apk'
}
